* 0L design

** State

- State is a list of maps with 3 keys: ~[{:ui nil :io nil :data nil}]~
- Cache invalidataion - as ~data~ is just a cached data of some remote
  storage we have to think about invalidation of that. For that we
  store ~:age~ of each piece of data. Meaning data is:
#+BEGIN_SRC clojure
{:data {:message {:sender "John" :content {:subject "Hello" :body "Hello ..."}}}}
;; Is actually stored like that
{:data [{:age {:sid "uuid:1231312" :time "00:00:00 00:00" :source :disk}  :executer :rule-name-a :data {:message {:sender "John" :content {:subject "Hello" :draft true}}}}
        {:age {:sid "uuid:0909090" :time "23:11:11 12.112" :source :http} :executer :rule-name-b :data {:message {:content {:body "Hello ..."}}}}
        {:age {:sid "uuid:0909090" :time "23:11:23 45.891" :source :http} :executer :rule-name-c :data {:message {:content {:draft nil}}}}]}
#+END_SRC
- ~io~ should return new ~:age~ for data
- As each piece of data has an age which includes ~:source~ we can
  skip everything that we fetched from disk or add something else:
  ~:persist-forever|:persist-never|:can-be-purged|:cheap-call|:tmp~
- Relation between data parts: ~f(:data) -> [:ui,:io]~. Meaning that ~ui~ and ~io~ are created from data
- While ~ui~ and ~io~ is derivative of data, still ~data~ is just a
  RAM cache and not a reliable storage
