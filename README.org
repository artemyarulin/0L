* zerol

Research project about inventing "silver bullet" that would solve all
software development problems. Obviously it's not possible but very
fun anycase

** What

- Model driven development - everything start with model and model rules
- Should be able to answer WHY certain thing had happened
- Should be able to answer WHAT-IF certain thing would happen differently
- Should be able to answer WHAT COULD happen next on any given moment
- Continious development - change code and see how app behaviour has
  changed comparing to previous version
- Logs/monitoring/contract validation from the box

** How

- Automatic unit (pure) test generation from model
- Automatic integration (with IO) test generation from model
- Automatic UI test generation from model
- Automatic test expolers generation by using ~f(state) -> [possible events]~
- Automatic error handling/propagation
- Controlled IO, which is represented as data
- One global EAV data storage
- Explicit intermediate state
- Notion of time/data age
- Monitoring data is application heartbit
- Moniroting data is test data

** Status

**** First failed attempt - CLJS + om-next

Didn't work as Om has their own way of working which has almost no
connection with my goals.

**** Second failed attempt - CLJS + custom EAV database + rule engine + clojure.spec

Didn't work as biggest part of data model verification is (surpise!)
type system. It could be acheived with dynamic ClojureScript and
clojure.spec, but requires extra work

**** Current (not failed yet) attempt - PureScript + custom DB + rule engine + modeling DSL + JS renderer

Status - hammock time, still figuring out what I actually want

** References

*** Papers
- [[http://alumni.media.mit.edu/~jorkin/GOAP_draft_AIWisdom2_2003.pdf][Applying Goal-Oriented Action Planning to Games]]
- [[http://web.stanford.edu/~ouster/cgi-bin/papers/rules-atc15][Experience with Rules-Based Programming for Distributed, Concurrent, Fault-Tolerant Code]]
- [[http://www.ece.cmu.edu/~ece740/f11/lib/exe/fetch.php%3Fmedia%3Dwiki:lectures:onur-740-fall11-lecture24-prefetching-afterlecture.pdf][Computer Architecture Lecture 24: Prefetching]]
- [[https://web.fe.up.pt/~apaiva/PhD/PhDGUITesting.pdf][Automated Specification-Based Testing of Graphical User Interfaces]]
- [[http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf][Why Most Unit Testing is Waste]]

*** Articles
- [[https://awelonblue.wordpress.com/2012/07/01/why-not-events/][Why not events]]
- [[https://78462f86-a-fe558111-s-sites.googlegroups.com/a/harryrobinson.net/www/ExploratoryTestAutomation-CAST.pdf][Exploratory Test Automation Harry Robinson CAST 2010]]
- [[http://0b4af6cdc2f0c5998459-c0245c5c937c5dedcca3f1764ecc9b2f.r43.cf2.rackcdn.com/9353-login1210_khurana.pdf][Introduction to hbase Schema Design]]
- [[http://techblog.procurios.nl/k/news/view/34441/14863/semantic-web-marvels-in-a-relational-database-part-ii-comparing-alternatives.html][Semantic web marvels in a relational database - part II: Comparing alternatives]]

*** Books
- [[http://www.amazon.com/Paradigms-Artificial-Intelligence-Programming-Studies/dp/1558601910][Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp]]

*** Talks
- [[https://www.youtube.com/watch?v=ajX09xQ_UEg][Game development development]]
- [[https://www.youtube.com/watch?v=5V1ynVyud4M][Eve]]
- [[https://www.youtube.com/watch?v=R2Aa4PivG0g][I See What You Mean]]

*** Projects
- [[https://www.haskell.org][Haskell]]
- [[https://github.com/omcljs/om][om-next]]
- [[https://github.com/reactjs/redux][redux]]
